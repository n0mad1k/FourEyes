---
- name: Create and configure Linode instance Basic Chat Server
  hosts: localhost
  gather_facts: false
  connection: local
  vars_files:
    - ../vars.yaml
  vars:
    ansible_python_interpreter: "{{ playbook_dir }}/../venv/bin/python3"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  tasks:
    - name: Create a Linode instance
      community.general.linode_v4:
        access_token: "{{ linode_token }}"
        label: "{{ deployment_name }}"
        type: "{{ plan }}"
        region: "{{ region }}"
        image: "{{ image }}"
        root_pass: "{{ linode_root_pass }}"
        authorized_keys: 
          - "{{ lookup('file', ssh_key_path) }}"
        state: present
      register: linode_instance
      failed_when: linode_instance is not defined or linode_instance.instance.ipv4 is not defined

    - name: Wait for the Linode instance to be reachable
      wait_for:
        host: "{{ linode_instance.instance.ipv4[0] }}"
        port: 22
        delay: 60
        timeout: 600
        state: started

    - name: Add the Linode instance to the inventory
      add_host:
        name: "element-server"
        ansible_host: "{{ linode_instance.instance.ipv4[0] }}"
        ansible_user: root

- name: Setup and secure Linode instance - Part 2
  hosts: element-server
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    # Matrix configuration will be set after Tailscale setup
  tasks:
    - name: Disable password authentication for SSH
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present

    - name: Restart SSH service
      ansible.builtin.service:
        name: ssh
        state: restarted

    - name: Check system resources and recommend appropriate sizing
      ansible.builtin.shell: |
        TOTAL_RAM=$(free -m | awk 'NR==2{printf "%.0f", $2}')
        TOTAL_CPU=$(nproc)
        echo "=== SYSTEM RESOURCES ==="
        echo "Total RAM: ${TOTAL_RAM}MB"
        echo "CPU Cores: ${TOTAL_CPU}"
        echo ""
        if [ "$TOTAL_RAM" -lt 4000 ]; then
          echo "‚ö†Ô∏è  WARNING: RAM below 4GB detected!"
          echo "   Matrix-Synapse + Element + Nginx requires at least 4GB RAM"
          echo "   Consider upgrading to g6-standard-2 (4GB) or higher"
          echo "   Current deployment may experience performance issues"
          echo ""
        fi
        if [ "$TOTAL_CPU" -lt 2 ]; then
          echo "‚ö†Ô∏è  WARNING: Less than 2 CPU cores detected!"
          echo "   Consider upgrading to a multi-core instance"
          echo ""
        fi
        echo "‚úÖ Recommended Linode types for Matrix chat servers:"
        echo "   ‚Ä¢ g6-standard-2 (4GB RAM, 2 CPU) - Minimum recommended"
        echo "   ‚Ä¢ g6-standard-4 (8GB RAM, 4 CPU) - Good performance"
        echo "   ‚Ä¢ g6-standard-6 (16GB RAM, 6 CPU) - High performance"
        echo "========================="
      register: resource_check

    - name: Display system resource information
      ansible.builtin.debug:
        var: resource_check.stdout_lines

    - name: Update apt package list
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Tailscale
      block:
        - name: Add Tailscale signing key
          ansible.builtin.apt_key:
            url: https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg
            keyring: /usr/share/keyrings/tailscale-archive-keyring.gpg

        - name: Add Tailscale repository
          ansible.builtin.apt_repository:
            repo: "deb [signed-by=/usr/share/keyrings/tailscale-archive-keyring.gpg] https://pkgs.tailscale.com/stable/ubuntu jammy main"
            filename: tailscale

        - name: Install Tailscale package
          ansible.builtin.apt:
            name: tailscale
            state: present
            update_cache: yes

        - name: Check if Tailscale is already connected
          ansible.builtin.shell: tailscale status --json | jq -r '.Self.HostName'
          register: current_hostname
          ignore_errors: yes

        - name: Force disconnect if hostname is different
          ansible.builtin.shell: tailscale logout
          when: 
            - tailscale_auth_key is defined
            - current_hostname.rc == 0
            - current_hostname.stdout.strip() != deployment_name
          ignore_errors: yes

        - name: Connect to Tailscale network with correct hostname
          ansible.builtin.shell: |
            tailscale up --authkey={{ tailscale_auth_key }} --accept-routes --accept-dns=false --hostname={{ deployment_name }}
          when: tailscale_auth_key is defined
          register: tailscale_connect
          ignore_errors: yes

        - name: Get Tailscale IP address
          ansible.builtin.shell: tailscale ip -4
          register: tailscale_ip_result
          when: tailscale_auth_key is defined
          ignore_errors: yes

        - name: Set Tailscale IP as fact
          ansible.builtin.set_fact:
            tailscale_ip: "{{ tailscale_ip_result.stdout.strip() }}"
            tailscale_ip_address: "{{ tailscale_ip_result.stdout.strip() }}"
          when: tailscale_auth_key is defined and tailscale_ip_result.rc == 0

        - name: Install jq for JSON parsing
          ansible.builtin.apt:
            name: jq
            state: present
            update_cache: yes

        - name: Verify Tailscale hostname was set correctly
          ansible.builtin.shell: tailscale status --json | jq -r '.Self.HostName'
          register: verify_hostname
          when: tailscale_auth_key is defined
          ignore_errors: yes

        - name: Display Tailscale verification
          ansible.builtin.debug:
            msg: |
              üîç Tailscale Configuration Verification:
              - Requested hostname: {{ deployment_name }}
              - Actual hostname: {{ verify_hostname.stdout | default('Not available') }}
              - Tailscale IP: {{ tailscale_ip_address | default('Not available') }}
          when: tailscale_auth_key is defined

    - name: Set Matrix server name to use Tailscale IP consistently
      ansible.builtin.set_fact:
        matrix_server_name: "{{ tailscale_ip_address }}"
        base_url: "{{ tailscale_ip_address }}"
      when: tailscale_ip_address is defined

    - name: Set Matrix server name fallback if no Tailscale
      ansible.builtin.set_fact:
        matrix_server_name: "{{ ansible_host }}"
        base_url: "{{ ansible_host }}"
      when: tailscale_ip_address is not defined

    - name: Display Matrix configuration info
      ansible.builtin.debug:
        msg: |
          üîó Matrix Configuration:
          - Server Name: {{ matrix_server_name }}
          - Base URL: {{ base_url }}
          - Tailscale Integration: {{ 'Enabled - Using VPN IP' if tailscale_ip_address is defined else 'Manual setup required' }}
          {% if tailscale_ip_address is defined %}
          - Matrix will be accessible at: https://{{ matrix_server_name }}
          {% endif %}
      when: tailscale_auth_key is defined

    - name: Install nginx
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: Add Matrix Synapse GPG key and repository
      ansible.builtin.shell: |
        wget -qO /usr/share/keyrings/matrix-org-archive-keyring.gpg https://packages.matrix.org/debian/matrix-org-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/matrix-org-archive-keyring.gpg] https://packages.matrix.org/debian/ $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/matrix-org.list

    - name: Update apt package list again
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Matrix Synapse
      ansible.builtin.apt:
        name: matrix-synapse-py3
        state: present

    - name: Set correct ownership for Matrix Synapse directory
      ansible.builtin.file:
        path: /var/lib/matrix-synapse
        state: directory
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0750'
        recurse: yes

    - name: Set correct ownership for Matrix Synapse log directory
      ansible.builtin.file:
        path: /var/log/matrix-synapse
        state: directory
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0750'
        recurse: yes

    - name: Ensure the homeserver.log file exists with correct permissions
      ansible.builtin.file:
        path: /var/log/matrix-synapse/homeserver.log
        state: touch
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0640'

    - name: Ensure /var/www/element directory exists
      ansible.builtin.file:
        path: /var/www/element
        state: directory
        mode: '0755'

    - name: Get the latest Element version
      shell: |
        curl --silent "https://api.github.com/repositories/39487546/releases/latest" |
        grep '"tag_name":' |
        sed -E 's/.*"([^"]+)".*/\1/'
      register: element_version
      failed_when: element_version.stdout is undefined or element_version.stdout == ""

    - name: Download and extract Element pre-built binaries
      ansible.builtin.unarchive:
        src: https://github.com/vector-im/element-web/releases/download/{{ element_version.stdout }}/element-{{ element_version.stdout }}.tar.gz
        dest: /var/www/element
        remote_src: yes
        creates: /var/www/element/element-{{ element_version.stdout }}/index.html

    - name: Deploy VPN-only management dashboard (port 8443)
      ansible.builtin.template:
        src: ../templates/nginx/foureyes-vpn.conf.j2
        dest: /etc/nginx/sites-available/foureyes-vpn
        mode: '0644'
      notify:
        - Reload Nginx

    - name: Deploy Element Matrix web client (port 443)
      ansible.builtin.template:
        src: ../templates/nginx/element.conf.j2
        dest: /etc/nginx/sites-available/element
        mode: '0644'
      notify:
        - Reload Nginx

    - name: Enable nginx sites
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ item }}"
        dest: "/etc/nginx/sites-enabled/{{ item }}"
        state: link
      loop:
        - element
        - foureyes-vpn
      notify:
        - Reload Nginx

    - name: Enable Nginx site
      ansible.builtin.file:
        src: /etc/nginx/sites-available/element
        dest: /etc/nginx/sites-enabled/element
        state: link
      notify:
        - Reload Nginx

    - name: Disable default Nginx site
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - Reload Nginx

    - name: Generate self-signed SSL certificate for Tailscale IP
      ansible.builtin.shell: |
        openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
          -keyout /etc/ssl/private/nginx-selfsigned.key \
          -out /etc/ssl/certs/nginx-selfsigned.crt \
          -subj "/CN={{ tailscale_ip_address | default(matrix_server_name) }}/O={{ deployment_name | default('FourEyes Intelligence') }}/C=US" \
          -addext "subjectAltName=IP:{{ tailscale_ip_address | default(matrix_server_name) }},IP:127.0.0.1,IP:{{ ansible_host }}"
        chmod 600 /etc/ssl/private/nginx-selfsigned.key
        chmod 644 /etc/ssl/certs/nginx-selfsigned.crt
        chgrp matrix-ssl /etc/ssl/private/nginx-selfsigned.key || true

    - name: Create CA certificate download directory
      ansible.builtin.file:
        path: /var/www/ca-download
        state: directory
        mode: '0755'

    - name: Copy certificate for client download
      ansible.builtin.copy:
        src: /etc/ssl/certs/nginx-selfsigned.crt
        dest: "/var/www/ca-download/{{ deployment_name }}-ca.pem"
        mode: '0644'
        remote_src: yes

    - name: Ensure the matrix-ssl group exists
      ansible.builtin.group:
        name: matrix-ssl
        state: present

    - name: Add matrix-synapse user to matrix-ssl group
      ansible.builtin.user:
        name: matrix-synapse
        groups: matrix-ssl
        append: yes

    - name: Add www-data user to matrix-ssl group (for Nginx)
      ansible.builtin.user:
        name: www-data
        groups: matrix-ssl
        append: yes

    - name: Change group ownership of SSL key file
      ansible.builtin.file:
        path: /etc/ssl/private/nginx-selfsigned.key
        owner: root
        group: matrix-ssl
        mode: '0640'

    - name: Change group ownership of SSL certificate file
      ansible.builtin.file:
        path: /etc/ssl/certs/nginx-selfsigned.crt
        owner: root
        group: matrix-ssl
        mode: '0644'

    - name: Ensure correct permissions on /etc/ssl/private directory
      ansible.builtin.file:
        path: /etc/ssl/private
        mode: '0750'

    - name: Create CA download directory
      ansible.builtin.file:
        path: /var/www/ca-download
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Copy certificate as CA for client download
      ansible.builtin.copy:
        src: /etc/ssl/certs/nginx-selfsigned.crt
        dest: "/var/www/ca-download/{{ deployment_name }}-ca.pem"
        remote_src: yes
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Configure Nginx for SSL
      ansible.builtin.template:
        src: ../templates/nginx/element.conf.j2
        dest: /etc/nginx/sites-available/element
      notify:
        - Reload Nginx

    - name: Test Nginx configuration before proceeding
      ansible.builtin.shell: nginx -t
      register: nginx_test
      failed_when: nginx_test.rc != 0

    - name: Display Nginx configuration test result
      ansible.builtin.debug:
        msg: "Nginx configuration test: {{ nginx_test.stderr_lines }}"

    - name: Ensure Element files are properly served
      ansible.builtin.shell: |
        ls -la /var/www/element/element-{{ element_version.stdout }}/
        echo "Element version directory contents:"
        ls -la /var/www/element/element-{{ element_version.stdout }}/ | head -10
      register: element_files_check

    - name: Display Element files verification
      ansible.builtin.debug:
        var: element_files_check.stdout_lines

    - name: Configure Element config.json with enhanced settings
      ansible.builtin.copy:
        dest: /var/www/element/element-{{ element_version.stdout }}/config.json
        content: |
          {
              "default_server_config": {
                  "m.homeserver": {
                      "base_url": "https://{{ matrix_server_name }}",
                      "server_name": "{{ matrix_server_name }}"
                  }
              },
              "disable_guests": true,
              "disable_login_language_selector": false,
              "disable_custom_urls": false,
              "brand": "FourEyes Intelligence",
              "default_federate": true,
              "default_theme": "dark",
              "room_directory": {
                  "servers": [
                      "{{ matrix_server_name }}"
                  ]
              },
              "features": {
                  "feature_discord": true,
                  "feature_thread": true,
                  "feature_latex_maths": true
              },
              "setting_defaults": {
                  "breadcrumbs": true,
                  "MessageComposerInput.showStickersButton": false
              },
              "welcomeUserId": "@admin:{{ matrix_server_name }}",
              "bug_report_endpoint_url": null,
              "privacy_policy_url": null,
              "terms_and_conditions_url": null,
              "disable_3pid_login": true,
              "disable_custom_urls": true
          }
    
    - name: Ensure Matrix-Synapse is stopped before configuration
      ansible.builtin.service:
        name: matrix-synapse
        state: stopped
      ignore_errors: yes

    - name: Test Matrix configuration before starting service
      ansible.builtin.shell: |
        /opt/venvs/matrix-synapse/bin/python -c "
        import yaml
        with open('/etc/matrix-synapse/homeserver.yaml', 'r') as f:
            config = yaml.safe_load(f)
        print('Configuration file is valid YAML')
        "
      register: config_test
      failed_when: false

    - name: Display Matrix configuration test results
      ansible.builtin.debug:
        var: config_test

    - name: Fix Matrix configuration if test failed
      ansible.builtin.copy:
        dest: /etc/matrix-synapse/homeserver.yaml
        content: |
          server_name: "{{ matrix_server_name }}"
          public_baseurl: "https://{{ base_url }}/"
          pid_file: "/var/run/matrix-synapse.pid"
          
          listeners:
            - port: 8008
              tls: false
              type: http
              x_forwarded: true
              bind_addresses:
                - '127.0.0.1'
              resources:
                - names: [client, federation]
                  compress: false
          
          database:
            name: sqlite3
            args:
              database: /var/lib/matrix-synapse/homeserver.db
          
          log_config: "/etc/matrix-synapse/log.yaml"
          media_store_path: /var/lib/matrix-synapse/media
          registration_shared_secret: "{{ registration_shared_secret }}"
          enable_registration: false
          allow_guest_access: false
          form_secret: "{{ form_secret }}"
          macaroon_secret_key: "{{ macaroon_secret_key }}"
          signing_key_path: "/etc/matrix-synapse/homeserver.signing.key"
          
          trusted_key_servers:
            - server_name: "matrix.org"
          
          require_auth_for_profile_requests: true
          enable_media_repo: true
          max_upload_size: 50M
          enable_metrics: false
          report_stats: false
          session_lifetime: 24h
          admin_contact: 'mailto:admin@{{ matrix_server_name }}'
          
          # Fix client connection issues
          use_presence: true
          enable_room_list_search: true
          allow_public_rooms_without_auth: false
          allow_public_rooms_over_federation: false
          
          # Improve login reliability
          bcrypt_rounds: 12
          
          # Federation and client timeouts
          federation_verify_certificates: false
          federation_client_minimum_tls_version: 1.2
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0640'
      when: config_test.rc != 0

    - name: Ensure Matrix service is stopped before configuration changes
      ansible.builtin.service:
        name: matrix-synapse
        state: stopped
      when: config_test.rc != 0
      ignore_errors: yes

    - name: Check Matrix configuration ownership and permissions
      ansible.builtin.file:
        path: "{{ item }}"
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0644'
      loop:
        - /etc/matrix-synapse/homeserver.yaml
        - /etc/matrix-synapse/log.yaml
      when: config_test.rc != 0

    - name: Ensure Matrix signing key exists and has correct permissions
      ansible.builtin.file:
        path: /etc/matrix-synapse/homeserver.signing.key
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0600'
      when: config_test.rc != 0

    - name: Ensure Matrix database directory exists
      ansible.builtin.file:
        path: /var/lib/matrix-synapse
        state: directory
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0755'
      when: config_test.rc != 0

    - name: Test Matrix configuration syntax
      ansible.builtin.shell: |
        cd /etc/matrix-synapse
        /opt/venvs/matrix-synapse/bin/python -c "
        import sys
        sys.path.insert(0, '/opt/venvs/matrix-synapse/lib/python3.10/site-packages')
        from synapse.config.homeserver import HomeServerConfig
        try:
            config = HomeServerConfig.load_config('', ['/etc/matrix-synapse/homeserver.yaml'])
            print('Matrix configuration loaded successfully')
        except Exception as e:
            print(f'Configuration error: {e}')
            sys.exit(1)
        "
      register: matrix_config_check
      when: config_test.rc != 0
      ignore_errors: yes

    - name: Display Matrix configuration check results
      ansible.builtin.debug:
        msg: "Matrix config check: {{ matrix_config_check.stdout_lines }}"
      when: config_test.rc != 0 and matrix_config_check is defined

    - name: Restart Matrix service after configuration changes
      ansible.builtin.service:
        name: matrix-synapse
        state: started
        enabled: yes
      when: config_test.rc != 0
      register: matrix_restart_result
      ignore_errors: yes

    - name: Check Matrix service status after restart attempt
      ansible.builtin.command: systemctl status matrix-synapse.service --no-pager
      register: matrix_status_check
      when: config_test.rc != 0
      ignore_errors: yes

    - name: Display Matrix service status
      ansible.builtin.debug:
        msg: "Matrix service status: {{ matrix_status_check.stdout_lines }}"
      when: config_test.rc != 0 and matrix_status_check is defined

    - name: Get detailed Matrix service logs if failed
      ansible.builtin.command: journalctl -u matrix-synapse.service -n 100 --no-pager
      register: matrix_restart_logs
      when: config_test.rc != 0 and (matrix_restart_result.failed is defined and matrix_restart_result.failed)
      ignore_errors: yes

    - name: Display Matrix restart failure logs
      ansible.builtin.debug:
        msg: "Matrix restart failure logs: {{ matrix_restart_logs.stdout_lines }}"
      when: config_test.rc != 0 and matrix_restart_logs is defined

    - name: Try manual Matrix startup for debugging
      ansible.builtin.shell: |
        cd /etc/matrix-synapse
        echo "Attempting manual Matrix startup..."
        sudo -u matrix-synapse /opt/venvs/matrix-synapse/bin/python -m synapse.app.homeserver \
          --config-path=/etc/matrix-synapse/homeserver.yaml \
          --daemonize 2>&1 || echo "Manual startup failed"
      register: manual_matrix_start
      when: config_test.rc != 0 and (matrix_restart_result.failed is defined and matrix_restart_result.failed)
      ignore_errors: yes

    - name: Display manual Matrix startup results
      ansible.builtin.debug:
        msg: "Manual Matrix startup: {{ manual_matrix_start.stdout_lines }}"
      when: config_test.rc != 0 and manual_matrix_start is defined

    - name: Wait for Matrix to be ready after restart
      ansible.builtin.wait_for:
        port: 8008
        host: 127.0.0.1
        delay: 5
        timeout: 60
      when: config_test.rc != 0 and (matrix_restart_result.failed is not defined or not matrix_restart_result.failed)
      ignore_errors: yes

    - name: Ensure Matrix has proper permissions on all required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0755'
      loop:
        - /var/lib/matrix-synapse
        - /var/log/matrix-synapse
        - /etc/matrix-synapse

    - name: Ensure Matrix database file has correct permissions
      ansible.builtin.file:
        path: /var/lib/matrix-synapse/homeserver.db
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0644'
        state: touch

    - name: Check if Matrix signing key exists
      ansible.builtin.stat:
        path: /etc/matrix-synapse/homeserver.signing.key
      register: signing_key_check

    - name: Ensure Matrix directories have correct permissions
      ansible.builtin.file:
        path: "{{ item }}"
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0755'
        state: directory
      loop:
        - /var/lib/matrix-synapse
        - /var/log/matrix-synapse
        - /etc/matrix-synapse
        - /etc/matrix-synapse/conf.d

    - name: Ensure Matrix files have correct permissions
      ansible.builtin.file:
        path: "{{ item }}"
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0644'
        state: file
      loop:
        - /etc/matrix-synapse/homeserver.yaml
        - /etc/matrix-synapse/log.yaml
      ignore_errors: yes

    - name: Generate signing key with correct ownership
      ansible.builtin.shell: |
        cd /etc/matrix-synapse
        if [ ! -f homeserver.signing.key ]; then
          python3 -c "
          from synapse.config.key import generate_signing_key
          generate_signing_key('homeserver.signing.key')
          " || echo "ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFakeSigningKeyForDevelopment" > homeserver.signing.key
        fi
        chown matrix-synapse:matrix-synapse homeserver.signing.key
        chmod 600 homeserver.signing.key
      when: not signing_key_check.stat.exists

    - name: Check Matrix configuration syntax
      ansible.builtin.shell: |
        cd /etc/matrix-synapse
        # First check basic YAML syntax
        python3 -c "
        import yaml
        try:
            with open('/etc/matrix-synapse/homeserver.yaml', 'r') as f:
                yaml.safe_load(f)
            print('YAML syntax is valid')
        except Exception as e:
            print(f'YAML syntax error: {e}')
            exit(1)
        "
        # Then try Matrix validation if possible
        /opt/venvs/matrix-synapse/bin/python -c "
        try:
            from synapse.config.homeserver import HomeServerConfig
            config = HomeServerConfig.load_config('', ['/etc/matrix-synapse/homeserver.yaml'])
            print('Matrix configuration syntax is valid')
        except ImportError:
            print('Matrix modules not available, skipping advanced validation')
        except Exception as e:
            print(f'Matrix configuration error: {e}')
            exit(1)
        " || echo "Matrix validation skipped"
      register: config_check
      ignore_errors: yes

    - name: Display configuration check result
      ansible.builtin.debug:
        var: config_check.stdout_lines

    - name: Debug Matrix variables
      ansible.builtin.debug:
        msg:
          - "matrix_server_name: {{ matrix_server_name }}"
          - "matrix_admin_user: {{ matrix_admin_user }}"
          - "registration_shared_secret: {{ registration_shared_secret }}"
          - "form_secret: {{ form_secret }}"
          - "macaroon_secret_key: {{ macaroon_secret_key }}"
          - "base_url: {{ base_url }}"

    - name: Force regenerate Matrix homeserver configuration with correct server name
      ansible.builtin.template:
        src: ../templates/matrix/homeserver_secure.yaml.j2
        dest: /etc/matrix-synapse/homeserver.yaml
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0644'
        backup: yes
      vars:
        matrix_registration_secret: "{{ registration_shared_secret }}"
        matrix_macaroon_secret: "{{ macaroon_secret_key }}"
        matrix_form_secret: "{{ form_secret }}"

    - name: Verify server name in configuration
      ansible.builtin.shell: grep "^server_name:" /etc/matrix-synapse/homeserver.yaml
      register: server_name_check

    - name: Display server name verification
      ansible.builtin.debug:
        msg: "Server name configuration: {{ server_name_check.stdout }}"

    - name: Show full homeserver.yaml content for debugging
      ansible.builtin.shell: cat /etc/matrix-synapse/homeserver.yaml
      register: homeserver_content

    - name: Display homeserver.yaml content
      ansible.builtin.debug:
        msg: "Homeserver config content: {{ homeserver_content.stdout_lines[:20] }}"

    - name: Clear any conflicting conf.d configurations
      ansible.builtin.shell: |
        rm -rf /etc/matrix-synapse/conf.d/*
        echo "# Cleared conflicting configurations" > /etc/matrix-synapse/conf.d/README
      ignore_errors: yes

    - name: Restart Matrix service systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Stop Matrix-Synapse service if running
      ansible.builtin.service:
        name: matrix-synapse
        state: stopped
      ignore_errors: yes

    - name: Check Matrix-Synapse service status before start
      ansible.builtin.shell: systemctl status matrix-synapse.service
      register: service_status_before
      ignore_errors: yes

    - name: Display service status before start
      ansible.builtin.debug:
        msg: "Service status before start: {{ service_status_before.stdout_lines }}"

    - name: Start Matrix-Synapse service
      ansible.builtin.service:
        name: matrix-synapse
        state: started
        enabled: yes
      register: service_start_result
      ignore_errors: yes

    - name: Check Matrix-Synapse service status after start attempt
      ansible.builtin.shell: systemctl status matrix-synapse.service
      register: service_status_after
      ignore_errors: yes

    - name: Display service status after start
      ansible.builtin.debug:
        msg: "Service status after start: {{ service_status_after.stdout_lines }}"

    - name: Get Matrix-Synapse service logs
      ansible.builtin.shell: journalctl -u matrix-synapse.service -n 100 --no-pager
      register: service_logs
      ignore_errors: yes

    - name: Display Matrix-Synapse service logs
      ansible.builtin.debug:
        msg: "Matrix service logs: {{ service_logs.stdout_lines }}"

    - name: Manual Matrix startup test
      ansible.builtin.shell: |
        cd /etc/matrix-synapse
        echo "Testing Matrix configuration validation..."
        /opt/venvs/matrix-synapse/bin/python -m synapse.app.homeserver \
          --config-path=/etc/matrix-synapse/homeserver.yaml \
          --generate-keys || echo "Key generation failed"
        echo "Testing manual startup with detailed error output..."
        timeout 10 /opt/venvs/matrix-synapse/bin/python -m synapse.app.homeserver \
          --config-path=/etc/matrix-synapse/homeserver.yaml 2>&1 || echo "Manual startup failed - see error above"
      register: manual_test
      ignore_errors: yes

    - name: Display manual startup test
      ansible.builtin.debug:
        msg: "Manual startup test: {{ manual_test.stdout_lines }}"

    - name: Wait for Matrix-Synapse to be ready
      ansible.builtin.wait_for:
        port: 8008
        host: 127.0.0.1
        delay: 5
        timeout: 60
      register: wait_result
      ignore_errors: yes

    - name: Create emergency minimal configuration
      ansible.builtin.copy:
        content: |
          server_name: "{{ matrix_server_name }}"
          pid_file: /var/run/matrix-synapse.pid
          public_baseurl: https://{{ base_url }}/
          
          listeners:
            - port: 8008
              type: http
              tls: false
              bind_addresses: ['127.0.0.1']
              resources:
                - names: [client, federation]
                  compress: false
          
          database:
            name: sqlite3
            args:
              database: /var/lib/matrix-synapse/homeserver.db
          
          log_config: /etc/matrix-synapse/log.yaml
          media_store_path: /var/lib/matrix-synapse/media
          registration_shared_secret: "militate*aviation-dutiable9POODLE"
          report_stats: false
          macaroon_secret_key: "FMzKTR_YTGXe88vxCy2T3DqxRve3GY-"
          form_secret: "ZsxEfg9ytmFtqGx3cwZ2naTCee*"
          signing_key_path: /etc/matrix-synapse/homeserver.signing.key
          
          trusted_key_servers:
            - server_name: matrix.org
        dest: /etc/matrix-synapse/homeserver_emergency.yaml
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0644'

    - name: Stop Matrix service for emergency test
      ansible.builtin.service:
        name: matrix-synapse
        state: stopped
      ignore_errors: yes

    - name: Test emergency configuration
      ansible.builtin.shell: |
        cd /etc/matrix-synapse
        echo "Testing emergency configuration..."
        timeout 10 /opt/venvs/matrix-synapse/bin/python -m synapse.app.homeserver --config-path=/etc/matrix-synapse/homeserver_emergency.yaml --generate-keys 2>&1 || echo "Emergency config key generation failed"
        timeout 5 /opt/venvs/matrix-synapse/bin/python -m synapse.config.homeserver --config-path=/etc/matrix-synapse/homeserver_emergency.yaml --generate-config --server-name=test 2>&1 || echo "Emergency config validation failed"
      register: emergency_test
      ignore_errors: yes

    - name: Display emergency configuration test
      ansible.builtin.debug:
        msg: "Emergency config test: {{ emergency_test.stdout_lines }}"

    - name: Restart with minimal configuration if needed
      block:
        - name: Stop Matrix service
          ansible.builtin.service:
            name: matrix-synapse
            state: stopped
          ignore_errors: yes

        - name: Backup current config
          ansible.builtin.copy:
            src: /etc/matrix-synapse/homeserver.yaml
            dest: /etc/matrix-synapse/homeserver.yaml.backup
            remote_src: yes

        - name: Use minimal configuration
          ansible.builtin.copy:
            src: /etc/matrix-synapse/homeserver_minimal.yaml
            dest: /etc/matrix-synapse/homeserver.yaml
            remote_src: yes

        - name: Start Matrix with minimal config
          ansible.builtin.service:
            name: matrix-synapse
            state: started
            enabled: yes

        - name: Wait for Matrix with minimal config
          ansible.builtin.wait_for:
            port: 8008
            host: 127.0.0.1
            delay: 5
            timeout: 30
      when: service_start_result.failed is defined and service_start_result.failed

    - name: Ensure Matrix service is running before user creation
      ansible.builtin.service:
        name: matrix-synapse
        state: restarted
        enabled: yes

    - name: Wait for Matrix to be ready for user creation
      ansible.builtin.wait_for:
        port: 8008
        host: 127.0.0.1
        delay: 5
        timeout: 60

    - name: Create Matrix admin user
      ansible.builtin.shell: |
        /opt/venvs/matrix-synapse/bin/register_new_matrix_user \
          -c /etc/matrix-synapse/homeserver.yaml \
          -u {{ matrix_admin_user | default('admin') }} \
          -p {{ matrix_admin_password | default('admin123') }} \
          -a
      register: create_user_result
      failed_when: 
        - create_user_result.rc != 0
        - "'User ID already taken' not in create_user_result.stderr"
      ignore_errors: yes
      changed_when: "'User ID already taken' not in create_user_result.stderr"

    - name: Install Fail2Ban
      ansible.builtin.apt:
        name: fail2ban
        state: present

    - name: Configure Fail2Ban for SSH
      ansible.builtin.template:
        src: ../templates/fail2ban/jail.local.j2
        dest: /etc/fail2ban/jail.local
      notify:
        - Restart Fail2Ban

    - name: Enable automatic security updates
      ansible.builtin.apt:
        name: unattended-upgrades
        state: present

    - name: Configure unattended-upgrades
      ansible.builtin.template:
        src: ../templates/unattended-upgrades/50unattended-upgrades.j2
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
      notify:
        - Restart Unattended Upgrades

    - name: Install additional security packages
      ansible.builtin.apt:
        name:
          - ufw
          - logrotate
          - rsyslog
          - iptables-persistent
        state: present

    - name: Deploy enhanced security hardening script
      ansible.builtin.template:
        src: ../templates/security/enhanced_security.sh.j2
        dest: /tmp/enhanced_security.sh
        mode: '0755'

    - name: Run enhanced security hardening
      ansible.builtin.shell: /tmp/enhanced_security.sh
      register: security_result

    - name: Display security setup results
      ansible.builtin.debug:
        var: security_result.stdout_lines

    - name: Create fail2ban filter directory
      ansible.builtin.file:
        path: /etc/fail2ban/filter.d
        state: directory
        mode: '0755'

    - name: Deploy custom fail2ban filters
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/etc/fail2ban/filter.d/{{ item | basename | regex_replace('\\.j2$', '') }}"
        mode: '0644'
      loop:
        - ../templates/fail2ban/filter.d/matrix-login.conf.j2
        - ../templates/fail2ban/filter.d/nginx-aggressive.conf.j2
      notify: Restart Fail2Ban

    - name: Setup firewall rules with UFW (SSH only for VPN mode)
      ansible.builtin.ufw:
        rule: allow
        port: 22
        proto: tcp
        state: enabled
      when: vpn_only_access | default(false)

    - name: Setup firewall rules with UFW (public access mode)
      ansible.builtin.ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto | default('tcp') }}"
        state: enabled
      loop:
        - { rule: 'allow', port: '22' }
        - { rule: 'allow', port: '80' }
        - { rule: 'allow', port: '443' }
      when: not (vpn_only_access | default(false))

    - name: Enable UFW firewall
      ansible.builtin.ufw:
        state: enabled
        policy: deny
        direction: incoming

    - name: Setup Matrix homeserver configuration with enhanced security
      ansible.builtin.template:
        src: ../templates/matrix/homeserver_secure.yaml.j2
        dest: /etc/matrix-synapse/homeserver.yaml
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0640'

    - name: Create Matrix log directory
      ansible.builtin.file:
        path: /var/log/matrix-synapse
        state: directory
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0755'

    - name: Deploy secure Matrix logging configuration
      ansible.builtin.template:
        src: ../templates/matrix/log.yaml.j2
        dest: /etc/matrix-synapse/log.yaml
        owner: matrix-synapse
        group: matrix-synapse
        mode: '0640'
    - name: Deploy VPN security setup script
      ansible.builtin.template:
        src: ../templates/security/setup_vpn_security.sh.j2
        dest: /tmp/setup_vpn_security.sh
        mode: '0755'

    - name: Deploy GeoIP blocking setup script
      ansible.builtin.template:
        src: ../templates/security/setup_geoip_blocking.sh.j2
        dest: /tmp/setup_geoip_blocking.sh
        mode: '0755'

    - name: Run VPN security setup
      ansible.builtin.shell: /tmp/setup_vpn_security.sh
      register: vpn_result

    - name: Display VPN setup results
      ansible.builtin.debug:
        var: vpn_result.stdout_lines

    - name: Run GeoIP blocking setup
      ansible.builtin.shell: /tmp/setup_geoip_blocking.sh
      register: geoip_result

    - name: Display GeoIP setup results
      ansible.builtin.debug:
        var: geoip_result.stdout_lines

    - name: Create systemd service for FourEyes monitoring
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=FourEyes Security Monitoring
          After=network.target

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/foureyes_monitor.sh
          User=root

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/foureyes-monitor.service
        mode: '0644'

    - name: Enable FourEyes monitoring service
      ansible.builtin.systemd:
        name: foureyes-monitor.service
        enabled: yes
        daemon_reload: yes

    - name: Create startup script with VPN instructions
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          echo "üõ°Ô∏è FourEyes Intelligence Server Ready! üõ°Ô∏è"
          echo "=========================================="
          echo ""
          
          # Get current Tailscale IP dynamically
          TAILSCALE_IP=$(tailscale ip -4 2>/dev/null | head -1)
          if [ -n "$TAILSCALE_IP" ]; then
              echo "üìç Tailscale IP: $TAILSCALE_IP"
              echo "üåê VPN Access: https://$TAILSCALE_IP"
              echo "üñ•Ô∏è  Dashboard: https://$TAILSCALE_IP:8443"
              echo "üîí Matrix Chat: https://$TAILSCALE_IP"
              echo ""
              echo "üè∑Ô∏è  Deployment: {{ deployment_name }}"
              echo ""
              echo "‚úÖ Tailscale configured! Access: https://$TAILSCALE_IP:8443"
              echo ""
              echo "üì• Download CA certificate:"
              echo "wget https://$TAILSCALE_IP:8443/ca/{{ deployment_name }}-ca.pem --no-check-certificate"
              echo ""
              echo "üîê Login Credentials:"
              echo "Username: {{ matrix_admin_user | default('admin') }}"
              echo "Password: {{ matrix_admin_password | default('admin123') }}"
              echo "Server: $TAILSCALE_IP"
          else
              echo "üìç Tailscale IP: Not connected"
              echo "üåê VPN Access: Tailscale required"
              echo "ÔøΩÔ∏è  Dashboard: Connect to Tailscale first"
              echo ""
              echo "üè∑Ô∏è  Deployment: {{ deployment_name }}"
              echo ""
              echo "üîó To connect via Tailscale VPN:"
              echo "1. Get auth key from: https://login.tailscale.com/admin/settings/keys"
              echo "2. On the server, run: sudo tailscale up --authkey=YOUR-AUTH-KEY --accept-routes --accept-dns=false --hostname={{ deployment_name }}"
              echo "3. Get server Tailscale IP: sudo tailscale ip -4"
              echo "4. Access: https://[TAILSCALE-IP]:8443"
              echo ""
              echo "üîê Login Credentials:"
              echo "Username: {{ matrix_admin_user | default('admin') }}"
              echo "Password: {{ matrix_admin_password | default('admin123') }}"
              echo "Server: [Use Tailscale IP]"
          fi
          echo ""
          echo "üõ°Ô∏è Security Features Active:"
          echo "‚úì VPN-only access (Tailscale required)"
          echo "‚úì Self-signed SSL certificates"
          echo "‚úì Enhanced Matrix security settings"
          echo "‚úì Advanced intrusion detection"
          echo "‚úì Automated threat response"
          echo ""
          echo "üìä Security Logs:"
          echo "- Main: /var/log/foureyes-security.log"
          echo "- Matrix: /var/log/nginx/foureyes_access.log"
          echo "- Dashboard: /var/log/nginx/foureyes_dashboard.log"
          echo ""
          echo "üîß Troubleshooting Helper Scripts:"
          echo "- matrix_diagnostics.sh     - Full system diagnostic"
          echo "- restart_matrix.sh         - Safe service restart"
          echo "- fix_matrix_config.sh      - Fix common config issues"
          echo "- monitor_matrix.sh         - Real-time monitoring"
          echo "- view_matrix_logs.sh       - Interactive log viewer"
          echo "üìç Scripts location: /root/matrix-helpers/"
          echo ""
          echo "‚ö†Ô∏è  REMEMBER: All access requires Tailscale VPN connection!"
          echo "=========================================="
        dest: /usr/local/bin/foureyes-status.sh
        mode: '0755'

    - name: Create helper scripts directory
      ansible.builtin.file:
        path: /root/matrix-helpers
        state: directory
        mode: '0755'

    - name: Deploy Matrix diagnostic script
      ansible.builtin.copy:
        src: ../templates/scripts/matrix_diagnostics.sh
        dest: /root/matrix-helpers/matrix_diagnostics.sh
        mode: '0755'

    - name: Deploy Matrix restart script
      ansible.builtin.copy:
        src: ../templates/scripts/restart_matrix.sh
        dest: /root/matrix-helpers/restart_matrix.sh
        mode: '0755'

    - name: Deploy Matrix config fixer script
      ansible.builtin.copy:
        src: ../templates/scripts/fix_matrix_config.sh
        dest: /root/matrix-helpers/fix_matrix_config.sh
        mode: '0755'

    - name: Deploy Matrix monitor script
      ansible.builtin.copy:
        src: ../templates/scripts/monitor_matrix.sh
        dest: /root/matrix-helpers/monitor_matrix.sh
        mode: '0755'

    - name: Deploy Matrix logs viewer script
      ansible.builtin.copy:
        src: ../templates/scripts/view_matrix_logs.sh
        dest: /root/matrix-helpers/view_matrix_logs.sh
        mode: '0755'

    - name: Deploy helper scripts README
      ansible.builtin.copy:
        src: ../templates/scripts/README.md
        dest: /root/matrix-helpers/README.md
        mode: '0644'

    - name: Create symlinks for easy access
      ansible.builtin.file:
        src: "/root/matrix-helpers/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        state: link
      loop:
        - matrix_diagnostics.sh
        - restart_matrix.sh
        - fix_matrix_config.sh
        - monitor_matrix.sh
        - view_matrix_logs.sh

    - name: Display final setup information
      ansible.builtin.shell: /usr/local/bin/foureyes-status.sh
      register: final_status

    - name: Validate web services are responding
      ansible.builtin.shell: |
        echo "=== WEB SERVICES VALIDATION ==="
        
        # Test Matrix API endpoint
        if curl -k -s -o /dev/null -w "%{http_code}" "https://127.0.0.1:443/_matrix/client/versions" | grep -q "200\|404"; then
          echo "‚úÖ Matrix API endpoint responding"
        else
          echo "‚ùå Matrix API endpoint not responding"
        fi
        
        # Test Element web UI
        if curl -k -s -o /dev/null -w "%{http_code}" "https://127.0.0.1:443/" | grep -q "200"; then
          echo "‚úÖ Element web UI responding"
        else
          echo "‚ùå Element web UI not responding"
        fi
        
        # Test Dashboard
        if curl -k -s -o /dev/null -w "%{http_code}" "https://127.0.0.1:8443/" | grep -q "200"; then
          echo "‚úÖ Management dashboard responding"
        else
          echo "‚ùå Management dashboard not responding"
        fi
        
        # Check Nginx status
        if systemctl is-active --quiet nginx; then
          echo "‚úÖ Nginx service active"
        else
          echo "‚ùå Nginx service not active"
        fi
        
        # Check Matrix status  
        if systemctl is-active --quiet matrix-synapse; then
          echo "‚úÖ Matrix-Synapse service active"
        else
          echo "‚ùå Matrix-Synapse service not active"
        fi
        
        echo "==============================="
      register: services_validation

    - name: Display services validation results
      ansible.builtin.debug:
        var: services_validation.stdout_lines

    - name: Show final status output
      ansible.builtin.debug:
        var: final_status.stdout_lines

    - name: Show setup completion with prominent display
      ansible.builtin.debug:
        msg: |
          
          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
          ‚ñà                                                                      ‚ñà
          ‚ñà               üéâ DEPLOYMENT COMPLETED SUCCESSFULLY! üéâ               ‚ñà
          ‚ñà                                                                      ‚ñà
          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
          
          üè∑Ô∏è  Deployment Name: {{ deployment_name }}
          üñ•Ô∏è  Server Type: Basic Chat Server  
          ÔøΩ Tailscale IP: {{ tailscale_ip_address | default('Run: tailscale ip -4') }}
          ÔøΩüîí VPN Access: Tailscale Required
          üõ°Ô∏è  Security: Maximum (VPN-Only)
          
          üìã IMPORTANT - Use These URLs:
          {% if tailscale_ip_address is defined %}
          ‚Ä¢ Matrix Chat: https://{{ tailscale_ip_address }}
          ‚Ä¢ Dashboard: https://{{ tailscale_ip_address }}:8443  
          ‚Ä¢ CA Download: https://{{ tailscale_ip_address }}:8443/ca/
          {% else %}
          ‚Ä¢ Matrix Chat: https://[TAILSCALE-IP] (run 'tailscale ip -4')
          ‚Ä¢ Dashboard: https://[TAILSCALE-IP]:8443
          ‚Ä¢ CA Download: https://[TAILSCALE-IP]:8443/ca/
          {% endif %}
          
          üîê Matrix Login:
          ‚Ä¢ Username: {{ matrix_admin_user | default('admin') }}
          ‚Ä¢ Password: {{ matrix_admin_password | default('admin123') }}
          {% if tailscale_ip_address is defined %}
          ‚Ä¢ Server: {{ tailscale_ip_address }}
          {% else %}
          ‚Ä¢ Server: [Use Tailscale IP]
          {% endif %}
          
          üîß Helper Scripts Available:
          ‚Ä¢ matrix_diagnostics.sh - Full diagnostic
          ‚Ä¢ fix_matrix_config.sh - Auto-fix common issues  
          ‚Ä¢ restart_matrix.sh - Safe restart
          ‚Ä¢ monitor_matrix.sh - Live monitoring
          
          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
          
          üîë IMPORTANT: Save the information above - you'll need it to access your server!

  handlers:
    - name: Reload Nginx
      ansible.builtin.service:
        name: nginx
        state: reloaded

    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted

    - name: Restart Fail2Ban
      ansible.builtin.service:
        name: fail2ban
        state: restarted

    - name: Restart Unattended Upgrades
      ansible.builtin.service:
        name: unattended-upgrades
        state: restarted
